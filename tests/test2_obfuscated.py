def X2(X5: str, X9: bytes) -> str:
    X3 = 0
    X10 = 0
    X11 = 0
    X4 = 10
    X6 = 0
    while (X4 != (- 1)):
        if (X4 == 10):
            X4 = 9
        elif (X4 == 9):
            X8 = X5
            X4 = 8
        elif (X4 == 8):
            X7 = X9
            X4 = 7
        elif (X4 == 7):
            X11 = 42
            X4 = 6
        elif (X4 == 6):
            X10 = X9.decode('utf-8')
            X4 = 5
        elif (X4 == 5):
            if ((((((((X11 + 5) - 5) == X11) or (((X11 + 8) - 8) == X11) or ((X11 ^ X11) == 0)) and (((X11 + 3) - 3) == X11)) and (((((X11 * 2) / 2) == X11) and (((X11 * 2) / 2) == X11) and (((X11 * 2) / 2) == X11)) or (((X11 * 2) / 2) == X11)) and (((((X11 * 2) / 2) == X11) or (((X11 & 3372670465) | ((~ X11) & 3372670465)) == 3372670465)) or ((((X11 * 2) / 2) == X11) or (((X11 & 1673246617) | ((~ X11) & 1673246617)) == 1673246617) or (((X11 & 846332969) | ((~ X11) & 846332969)) == 846332969)) or ((((X11 * 2) / 2) == X11) or ((X11 ^ X11) == 0)))) or (((X11 * 2) / 2) == X11)) and (((((X11 + 3) - 3) == X11) or ((((X11 ^ X11) == 0) and (((X11 * 2) / 2) == X11) and (((X11 + 3) - 3) == X11)) and ((((X11 & 2762491272) | ((~ X11) & 2762491272)) == 2762491272) or ((X11 ^ X11) == 0) or (((X11 & 891821723) | ((~ X11) & 891821723)) == 891821723)))) or ((((((X11 * 2) / 2) == X11) and ((X11 ^ X11) == 0) and (((X11 & 2935101785) | ((~ X11) & 2935101785)) == 2935101785)) and ((((X11 + 10) - 10) == X11) and (((X11 * 2) / 2) == X11))) and ((((X11 ^ X11) == 0) or (((X11 + 10) - 10) == X11)) and ((X11 ^ X11) == 0))))):
                X4 = 0
            else:
                X4 = 4
        elif (X4 == 4):
            X3 = 0
            X4 = 3
        elif (X4 == 3):
            X3 = (X3 + (X11 + 4088))
            X4 = 2
        elif (X4 == 2):
            X3 = (X3 - 45947)
            X4 = 1
        elif (X4 == 1):
            X3 = (X3 & 15250)
            X4 = (- 1)
        elif (X4 == 0):
            X6 = ((X5 + ' ') + X10)
            X4 = (- 1)
    return X6

def X1(X13):
    if (X13 == 0):
        return b'\x00'
    X12 = bytearray()
    while X13:
        X12.append((X13 & 255))
        X13 >>= 8
    return bytes(X12[::(- 1)])
print('Hello, my name is', (X2('John', b'Doe') + '.'))